














//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by BLToolkit template for T4.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

using BLToolkit.Data;
using BLToolkit.Data.DataProvider;
using BLToolkit.Data.Linq;
using BLToolkit.Data.Sql;
using BLToolkit.Data.Sql.SqlProvider;
using BLToolkit.DataAccess;
using BLToolkit.Mapping;

namespace GIMS.Db
{
	public partial class GimsDb : DbManager
	{
		public Table<Supplier> Suppliers { get { return this.GetTable<Supplier>(); } }
		
#region FreeTextTable

public class FreeTextKey<T>
{
	public T   Key;
	public int Rank;
}

class FreeTextTableExpressionAttribute : TableExpressionAttribute
{
	public FreeTextTableExpressionAttribute()
		: base("")
	{
	}

	public override void SetTable(SqlTable table, MemberInfo member, IEnumerable<Expression> expArgs, IEnumerable<ISqlExpression> sqlArgs)
	{
		var aargs  = sqlArgs.ToArray();
		var arr    = ConvertArgs(member, aargs).ToList();
		var method = (MethodInfo)member;
		var sp     = new MsSql2008SqlProvider();

		{
			var ttype  = method.GetGenericArguments()[0];
			var tbl    = new SqlTable(ttype);

			var database     = tbl.Database     == null ? null : sp.Convert(tbl.Database,     ConvertType.NameToDatabase).  ToString();
			var owner        = tbl.Owner        == null ? null : sp.Convert(tbl.Owner,        ConvertType.NameToOwner).     ToString();
			var physicalName = tbl.PhysicalName == null ? null : sp.Convert(tbl.PhysicalName, ConvertType.NameToQueryTable).ToString();

			var name   = sp.BuildTableName(new StringBuilder(), database, owner, physicalName);

			arr.Add(new SqlExpression(name.ToString(), Precedence.Primary));
		}

		{
			var field = ((ConstantExpression)expArgs.First()).Value;

			if (field is string)
			{
				arr[0] = new SqlExpression(field.ToString(), Precedence.Primary);
			}
			else if (field is LambdaExpression)
			{
				var body = ((LambdaExpression)field).Body;

				if (body is MemberExpression)
				{
					var name = ((MemberExpression)body).Member.Name;

					name = sp.Convert(name, ConvertType.NameToQueryField).ToString();

					arr[0] = new SqlExpression(name, Precedence.Primary);
				}
			}
		}

		table.SqlTableType   = SqlTableType.Expression;
		table.Name           = "FREETEXTTABLE({6}, {2}, {3}) {1}";
		table.TableArguments = arr.ToArray();
	}
}

[FreeTextTableExpressionAttribute]
public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
{
	return GetTable<FreeTextKey<TKey>>(
		this,
		((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
		field,
		text);
}

[FreeTextTableExpressionAttribute]
public Table<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
{
	return GetTable<FreeTextKey<TKey>>(
		this,
		((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
		fieldSelector,
		text);
}

#endregion
	}

	[TableName(Name="Suppliers")]
	public partial class Supplier
	{
		[Identity               ] public int    Id            { get; set; } // int(10)
		[          PrimaryKey(1)] public Guid   SupplierId    { get; set; } // uniqueidentifier
		                          public string Name          { get; set; } // varchar(150)
		                          public string Address       { get; set; } // varchar(300)
		                          public string ContactNumber { get; set; } // varchar(30)
		                          public bool   IsActive      { get; set; } // bit
		[Nullable               ] public string Remarks       { get; set; } // varchar(500)
	}
}
